<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue与React的生命周期钩子</title>
      <link href="2021/03/24/Vue%E4%B8%8EReact%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90/"/>
      <url>2021/03/24/Vue%E4%B8%8EReact%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="一-vue的生命周期如下图所示-很清晰-初始化、编译、更新、销毁"><a href="#一-vue的生命周期如下图所示-很清晰-初始化、编译、更新、销毁" class="headerlink" title="一 vue的生命周期如下图所示(很清晰)初始化、编译、更新、销毁"></a>一 vue的生命周期如下图所示(很清晰)初始化、编译、更新、销毁</h1><p> <img src= "/img/loading.gif" data-lazy-src="/img/lifecycle-01.png" alt="img"></p><h1 id="二-vue生命周期的栗子"><a href="#二-vue生命周期的栗子" class="headerlink" title="二 vue生命周期的栗子"></a>二 vue生命周期的栗子</h1><p> 注意触发vue的created事件以后,this便指向vue实例,这点很重要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;vue生命周期&lt;&#x2F;title&gt;</span><br><span class="line">        &lt;script src&#x3D;&quot;..&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">        &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1,minimum-scale&#x3D;1,maximum-scale&#x3D;1,user-scalable&#x3D;no&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;test&quot; style&#x3D;&quot;border: 1px black dashed;padding: 8px;&quot;&gt;</span><br><span class="line">            &#123;&#123;a&#125;&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;test2&quot; style&#x3D;&quot;border: 1px red solid;margin-top: 10px;padding: 8px;&quot;&gt;</span><br><span class="line">            我是内容二</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">            var myVue &#x3D; new Vue(&#123;</span><br><span class="line">                el: &quot;.test&quot;,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    a: &quot;我是内容,在控制台输入myVue.a&#x3D;123456,可以改变我的值&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                beforeCreate: function () &#123;</span><br><span class="line">                    console.log(&quot;建立前&quot;);</span><br><span class="line">                &#125;,</span><br><span class="line">                created: function () &#123; </span><br><span class="line">                    &#x2F;&#x2F;在实例创建之后同步调用。此时实例已经结束解析选项，这意味着已建立：数据绑定，计算属性，方法，watcher&#x2F;事件回调。</span><br><span class="line">                    &#x2F;&#x2F;但是还没有开始 DOM 编译，$el 还不存在,但是实例存在,即this.a存在,可打印出来 。</span><br><span class="line">                    console.log(&quot;建立&quot;);</span><br><span class="line">                &#125;,</span><br><span class="line">                beforeMount: function () &#123;</span><br><span class="line">                    console.log(&quot;渲染前&quot;);</span><br><span class="line">                &#125;,</span><br><span class="line">                mounted: function () &#123; </span><br><span class="line">                    console.log(&quot;渲染后&quot;);</span><br><span class="line">                &#125;,</span><br><span class="line">                beforeUpdate: function () &#123;  </span><br><span class="line">                    console.log(&quot;更新前&quot;);</span><br><span class="line">                &#125;,</span><br><span class="line">                updated: function () &#123; </span><br><span class="line">                    console.log(&quot;更新后&quot;);</span><br><span class="line">                &#125;,</span><br><span class="line">                beforeDestroy: function () &#123;  &#x2F;&#x2F;触发方式,在console里面打myVue.$destroy();</span><br><span class="line">                    &#x2F;&#x2F;在开始销毁实例时调用。此时实例仍然有功能。</span><br><span class="line">                    console.log(&quot;销毁前&quot;);</span><br><span class="line">                &#125;,</span><br><span class="line">                destroyed: function () &#123;   &#x2F;&#x2F;触发方式,在console里面打myVue.$destroy();其中myVue.$destroy(true)是删除DOM节点,会触发detached函数,但是实例仍然存在</span><br><span class="line">                    &#x2F;&#x2F;在实例被销毁之后调用。此时所有的绑定和实例的指令已经解绑，注意是解绑不是销毁,所有的子实例也已经被销毁。</span><br><span class="line">                    console.log(&quot;已销毁&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h1 id="一、react生命周期"><a href="#一、react生命周期" class="headerlink" title="一、react生命周期"></a>一、react生命周期</h1><p>React 生命周期分为三种状态 1. 初始化 2.更新 3.销毁</p><p><img src= "/img/loading.gif" data-lazy-src="/img/lifecycle-02.jpg" alt="img"></p><ul><li><strong>初始化</strong></li></ul><p>1、getDefaultProps()</p><blockquote><p>设置默认的props，也可以用ufaultProps设置组件的默认属性.</p></blockquote><p>2、getInitialState()</p><blockquote><p>在使用es6的class语法时是没有这个钩子函数的，可以直接在constructor中定义this.state。此时可以访问this.props</p></blockquote><p>3、componentWillMount()</p><blockquote><p>组件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state。</p></blockquote><p>4、 render()</p><blockquote><p>react最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时就不能更改state了。</p></blockquote><p>5、componentDidMount()</p><blockquote><p>组件渲染之后调用，只调用一次。</p></blockquote><ul><li><strong>更新</strong></li></ul><p>6、componentWillReceiveProps(nextProps)</p><blockquote><p>组件初始化时不调用，组件接受新的props时调用。</p></blockquote><p>7、shouldComponentUpdate(nextProps, nextState)</p><blockquote><p>react性能优化非常重要的一环。组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，如果相同则返回false阻止更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候</p></blockquote><p>8、componentWillUpdata(nextProps, nextState)</p><blockquote><p>组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state</p></blockquote><p>9、render()</p><blockquote><p>组件渲染</p></blockquote><p>10、componentDidUpdate()</p><blockquote><p>组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。</p></blockquote><ul><li><strong>卸载</strong></li></ul><p>11、componentWillUnmount()</p><blockquote><p>组件将要卸载时调用，一些事件监听和定时器需要在此时清除。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios请求与接收</title>
      <link href="2021/03/21/axios%E8%AF%B7%E6%B1%82/"/>
      <url>2021/03/21/axios%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="Axios是一个基于-promise-的-HTTP-库，可以用在浏览器和-node-js-中。"><a href="#Axios是一个基于-promise-的-HTTP-库，可以用在浏览器和-node-js-中。" class="headerlink" title="Axios是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。"></a><a href="http://axios-js.com/">Axios</a>是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</h2><h2 id="1-axios的基本使用"><a href="#1-axios的基本使用" class="headerlink" title="1. axios的基本使用"></a>1. axios的基本使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行npm进行axios的安装</span></span><br><span class="line">npm install axios</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用默认方式发送请求  默认情况下发送GET请求</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">axios(&#123;</span><br><span class="line">    url:<span class="string">&#x27;请求路径&#x27;</span>,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">            &#125;    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用GET 无参数 请求</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">axios(&#123;</span><br><span class="line">    url:<span class="string">&#x27;请求路径&#x27;</span>,</span><br><span class="line">    method:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">            &#125;    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用POST 无参数 请求</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">axios(&#123;</span><br><span class="line">    url:<span class="string">&#x27;请求路径&#x27;</span>,</span><br><span class="line">    method:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">            &#125;)    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2-参数的传递方法"><a href="#2-参数的传递方法" class="headerlink" title="2.参数的传递方法"></a>2.参数的传递方法</h2><h4 id="1-以下为Get请求传参"><a href="#1-以下为Get请求传参" class="headerlink" title="1.以下为Get请求传参"></a>1.以下为Get请求传参</h4><p>方法①：在axios的url当中直接添加参数，例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;?为分割路径和参数,id&#x3D;1 是需要传递的参数</span><br><span class="line">axios(&#123;</span><br><span class="line">    url:&#39;请求路径&#39;+&#39;?id&#x3D;1&#39;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>方法②：在axios的params当中添加参数，例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    url:&#39;请求路径&#39;,</span><br><span class="line">    params: &#123;</span><br><span class="line">    id:&#39;1&#39;,</span><br><span class="line">    name:&#39;张三&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-以下为Post请求传参"><a href="#2-以下为Post请求传参" class="headerlink" title="2.以下为Post请求传参"></a>2.以下为Post请求传参</h4><p>方法①：在axios的data中添加参数，例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;以下方法在后台控制器接收的name为nall。</span><br><span class="line">不过有三种解决方式：</span><br><span class="line">1.将data改为params。</span><br><span class="line">2.将内部键值对改为  &quot;name&#x3D;xxx&quot; 形式</span><br><span class="line">3.在服务器端给参数加上 @requestBody</span><br><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">    url:&#39;请求路径&#39;,</span><br><span class="line">    method:&#39;POST&#39;,</span><br><span class="line">    data: &#123;</span><br><span class="line">    id:&#39;1&#39;,</span><br><span class="line">    name:&#39;张三&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="3-axios的简写"><a href="#3-axios的简写" class="headerlink" title="3.axios的简写"></a>3.axios的简写</h2><p>Get：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.get(&#39;请求路径&#39;,&quot;name&#x3D;xxx&quot;).then(res)&#x3D;&gt;&#123;</span><br><span class="line">&#x2F;&#x2F;请求成功后执行</span><br><span class="line">console.log(res);</span><br><span class="line">&#125;.catch(err&#x3D;&gt;&#123;</span><br><span class="line">&#x2F;&#x2F;请求失败后执行</span><br><span class="line">console.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Post：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.post(&#39;请求路径&#39;,&quot;name&#x3D;xxx&quot;).then(res)&#x3D;&gt;&#123;</span><br><span class="line">&#x2F;&#x2F;请求成功后执行</span><br><span class="line">console.log(res);</span><br><span class="line">&#125;.catch(err&#x3D;&gt;&#123;</span><br><span class="line">&#x2F;&#x2F;请求失败后执行</span><br><span class="line">console.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="4-axios的并发请求"><a href="#4-axios的并发请求" class="headerlink" title="4.axios的并发请求"></a>4.axios的并发请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过axios的spread方法处理响应数组的结果</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">axios.all([</span><br><span class="line">    axios.get(<span class="string">&#x27;请求1&#x27;</span>),</span><br><span class="line">axios.get(<span class="string">&#x27;请求2&#x27;</span>)</span><br><span class="line">]).then(</span><br><span class="line">    axios.spread(<span class="function">(<span class="params">res1,res2</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res1);</span><br><span class="line">                <span class="built_in">console</span>.log(res2);</span><br><span class="line">            &#125;)</span><br><span class="line">    ).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//请求失败后执行</span></span><br><span class="line"><span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="5-axios的全局配置"><a href="#5-axios的全局配置" class="headerlink" title="5.axios的全局配置"></a>5.axios的全局配置</h2><h4 id="1-全局配置下的网络请求"><a href="#1-全局配置下的网络请求" class="headerlink" title="1.全局配置下的网络请求"></a>1.全局配置下的网络请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过axios的spread方法处理响应数组的结果</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">axios.defaults.baseURL=<span class="string">&#x27;请求公用路径&#x27;</span>;</span><br><span class="line">axios.defaults.timeout=响应超时时间;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据默认请求配置，进行网络请求</span></span><br><span class="line">axios.get(<span class="string">&#x27;请求的详细路径&#x27;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;);</span><br><span class="line">axios.post(<span class="string">&#x27;请求的详细路径&#x27;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-配合实例化配置使用更香哦！！！"><a href="#2-配合实例化配置使用更香哦！！！" class="headerlink" title="2.配合实例化配置使用更香哦！！！"></a>2.配合实例化配置使用更香哦！！！</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过axios的spread方法处理响应数组的结果</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> newVar = axios.create(&#123;</span><br><span class="line">        axios.defaults.baseURL=<span class="string">&#x27;请求公用路径&#x27;</span>,</span><br><span class="line">axios.defaults.timeout=响应超时时间</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newVar1 = axios.create(&#123;</span><br><span class="line">        axios.defaults.baseURL=<span class="string">&#x27;请求公用路径&#x27;</span>,</span><br><span class="line">axios.defaults.timeout=响应超时时间</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据默认请求配置，进行网络请求</span></span><br><span class="line">newVar(&#123;</span><br><span class="line">        url:<span class="string">&#x27;请求的详细路径&#x27;</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">newVar1(&#123;</span><br><span class="line">        url:<span class="string">&#x27;请求的详细路径&#x27;</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="6-拦截器"><a href="#6-拦截器" class="headerlink" title="6. 拦截器"></a>6. 拦截器</h2><p><strong>主要作用于网络请求发起和响应的时候进行操作处理，</strong></p><p><strong>发起请求的时候可以添加网页加载的动画，对用户的登入进行强制。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//request(请求拦截器)response(响应拦截器)</span></span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">axios.interceptors.request 或者 response.use(<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(config);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">&#x27;请求路径&#x27;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React的PubSub机制</title>
      <link href="2021/03/18/React%E7%9A%84PubSub%E6%9C%BA%E5%88%B6/"/>
      <url>2021/03/18/React%E7%9A%84PubSub%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="React使用PubSub事件订阅，组件间通信"><a href="#React使用PubSub事件订阅，组件间通信" class="headerlink" title="React使用PubSub事件订阅，组件间通信"></a>React使用PubSub事件订阅，组件间通信</h1><h2 id="1-官网：https-github-com-mroderick-PubSubJS"><a href="#1-官网：https-github-com-mroderick-PubSubJS" class="headerlink" title="1.官网：https://github.com/mroderick/PubSubJS"></a>1.官网：<a href="https://github.com/mroderick/PubSubJS">https://github.com/mroderick/PubSubJS</a></h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>​    <a href="https://github.com/mroderick/PubSubJS">PubSub</a>，一个利用JavaScript进行发布/订阅的库，</p><p>为了方便在模块化开发当中进行各个模块的数据传递，所以引入了PubSub.js库。</p><h3 id="2-消息订阅与发布机制"><a href="#2-消息订阅与发布机制" class="headerlink" title="2.消息订阅与发布机制"></a>2.消息订阅与发布机制</h3><pre><code>               1.先订阅，再发布（理解：有一种隔空对话的感觉）              2.适用于任意组件间通信                        3.要在组件的componentWillUnmount中取消订阅</code></pre><h2 id="2-PubSub安装"><a href="#2-PubSub安装" class="headerlink" title="2.PubSub安装"></a>2.PubSub安装</h2><h3 id="1-下载依赖包"><a href="#1-下载依赖包" class="headerlink" title="1.下载依赖包"></a>1.下载依赖包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install pubsub-js </span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">yarn add pubsub-js</span><br></pre></td></tr></table></figure><h3 id="2-使用外链引用"><a href="#2-使用外链引用" class="headerlink" title="2.使用外链引用"></a>2.使用外链引用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.jsdelivr.com/#!pubsubjs</span></span><br><span class="line">https:<span class="comment">//cdnjs.com/libraries/pubsub-js</span></span><br><span class="line">https:<span class="comment">//unpkg.com/pubsub-js</span></span><br></pre></td></tr></table></figure><h3 id="3-在组件中导入"><a href="#3-在组件中导入" class="headerlink" title="3.在组件中导入"></a>3.在组件中导入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// or when using CommonJS</span></span><br><span class="line"><span class="keyword">const</span> PubSub = <span class="built_in">require</span>(<span class="string">&#x27;pubsub-js&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="4-使用PubSub"><a href="#4-使用PubSub" class="headerlink" title="4.使用PubSub"></a>4.使用PubSub</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//消息发布：传递两个参数一个是接受函数的名字，一个给接受函数传递的参数</span></span><br><span class="line">  PubSub.publish(<span class="string">&#x27;fnName&#x27;</span>,data)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//消息订阅：函数接受  使用一个变量token去接收,传递两个参数，一个是定义的函数名字，一个是接收的函数（接收函数里面的msg可以忽略，data就是传递过来的值）；</span></span><br><span class="line"><span class="comment">//emmm，感觉和vuex有类似的地方</span></span><br><span class="line">   <span class="built_in">this</span>.token = PubSub.subscribe(<span class="string">&#x27;fnName&#x27;</span>, <span class="function">(<span class="params">msg, data</span>) =&gt;</span> &#123;</span><br><span class="line">             <span class="built_in">console</span>.log(data);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h3 id="5-案例"><a href="#5-案例" class="headerlink" title="5.案例"></a>5.案例</h3><p>​            在要使用的组件引入：**import PubSub from ‘pubsub-js’ ** ，然后在父组件的componentWillMount钩子进行消息的订阅。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Bar <span class="keyword">from</span> <span class="string">&#x27;./components/Bar&#x27;</span></span><br><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      msg:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">componentWillMount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 订阅消息</span></span><br><span class="line">    PubSub.subscribe(<span class="string">&#x27;msg&#x27;</span>,<span class="function">(<span class="params">msg,data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        msg:data</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;msg&#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Bar/&gt;</span><br><span class="line">        &lt;p style=&#123;&#123;<span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>&#125;&#125;&gt;我是订阅的结果：&#123;msg&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​            在子组件/(兄弟组件)中进行发布消息，毕竟有了快递包裹的发件人，( •̀ ω •́ )y一定会有接受包裹的收件人。在这里我就以子组件为例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  sendMsg = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 发布消息</span></span><br><span class="line">    PubSub.publish(<span class="string">&#x27;msg&#x27;</span>,<span class="string">`我是发布的随机数：<span class="subst">$&#123;<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">1000</span>)&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.sendMsg&#125;&gt;发布消息&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PubSub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
