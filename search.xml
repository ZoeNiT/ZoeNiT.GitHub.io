<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>axios请求与接收</title>
      <link href="2021/03/21/axios%E8%AF%B7%E6%B1%82/"/>
      <url>2021/03/21/axios%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="Axios是一个基于-promise-的-HTTP-库，可以用在浏览器和-node-js-中。"><a href="#Axios是一个基于-promise-的-HTTP-库，可以用在浏览器和-node-js-中。" class="headerlink" title="Axios是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。"></a><a href="http://axios-js.com/">Axios</a>是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</h2><h2 id="1-axios的基本使用"><a href="#1-axios的基本使用" class="headerlink" title="1. axios的基本使用"></a>1. axios的基本使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行npm进行axios的安装</span></span><br><span class="line">npm install axios</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用默认方式发送请求  默认情况下发送GET请求</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">axios(&#123;</span><br><span class="line">    url:<span class="string">&#x27;请求路径&#x27;</span>,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">            &#125;    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用GET 无参数 请求</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">axios(&#123;</span><br><span class="line">    url:<span class="string">&#x27;请求路径&#x27;</span>,</span><br><span class="line">    method:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">            &#125;    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用POST 无参数 请求</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">axios(&#123;</span><br><span class="line">    url:<span class="string">&#x27;请求路径&#x27;</span>,</span><br><span class="line">    method:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">            &#125;)    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2-参数的传递方法"><a href="#2-参数的传递方法" class="headerlink" title="2.参数的传递方法"></a>2.参数的传递方法</h2><h4 id="1-以下为Get请求传参"><a href="#1-以下为Get请求传参" class="headerlink" title="1.以下为Get请求传参"></a>1.以下为Get请求传参</h4><p>方法①：在axios的url当中直接添加参数，例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;?为分割路径和参数,id&#x3D;1 是需要传递的参数</span><br><span class="line">axios(&#123;</span><br><span class="line">    url:&#39;请求路径&#39;+&#39;?id&#x3D;1&#39;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>方法②：在axios的params当中添加参数，例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    url:&#39;请求路径&#39;,</span><br><span class="line">    params: &#123;</span><br><span class="line">    id:&#39;1&#39;,</span><br><span class="line">    name:&#39;张三&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-以下为Post请求传参"><a href="#2-以下为Post请求传参" class="headerlink" title="2.以下为Post请求传参"></a>2.以下为Post请求传参</h4><p>方法①：在axios的data中添加参数，例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;以下方法在后台控制器接收的name为nall。</span><br><span class="line">不过有三种解决方式：</span><br><span class="line">1.将data改为params。</span><br><span class="line">2.将内部键值对改为  &quot;name&#x3D;xxx&quot; 形式</span><br><span class="line">3.在服务器端给参数加上 @requestBody</span><br><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">    url:&#39;请求路径&#39;,</span><br><span class="line">    method:&#39;POST&#39;,</span><br><span class="line">    data: &#123;</span><br><span class="line">    id:&#39;1&#39;,</span><br><span class="line">    name:&#39;张三&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="3-axios的简写"><a href="#3-axios的简写" class="headerlink" title="3.axios的简写"></a>3.axios的简写</h2><p>Get：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.get(&#39;请求路径&#39;,&quot;name&#x3D;xxx&quot;).then(res)&#x3D;&gt;&#123;</span><br><span class="line">&#x2F;&#x2F;请求成功后执行</span><br><span class="line">console.log(res);</span><br><span class="line">&#125;.catch(err&#x3D;&gt;&#123;</span><br><span class="line">&#x2F;&#x2F;请求失败后执行</span><br><span class="line">console.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Post：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.post(&#39;请求路径&#39;,&quot;name&#x3D;xxx&quot;).then(res)&#x3D;&gt;&#123;</span><br><span class="line">&#x2F;&#x2F;请求成功后执行</span><br><span class="line">console.log(res);</span><br><span class="line">&#125;.catch(err&#x3D;&gt;&#123;</span><br><span class="line">&#x2F;&#x2F;请求失败后执行</span><br><span class="line">console.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="4-axios的并发请求"><a href="#4-axios的并发请求" class="headerlink" title="4.axios的并发请求"></a>4.axios的并发请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过axios的spread方法处理响应数组的结果</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">axios.all([</span><br><span class="line">    axios.get(<span class="string">&#x27;请求1&#x27;</span>),</span><br><span class="line">axios.get(<span class="string">&#x27;请求2&#x27;</span>)</span><br><span class="line">]).then(</span><br><span class="line">    axios.spread(<span class="function">(<span class="params">res1,res2</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res1);</span><br><span class="line">                <span class="built_in">console</span>.log(res2);</span><br><span class="line">            &#125;)</span><br><span class="line">    ).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//请求失败后执行</span></span><br><span class="line"><span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="5-axios的全局配置"><a href="#5-axios的全局配置" class="headerlink" title="5.axios的全局配置"></a>5.axios的全局配置</h2><h4 id="1-全局配置下的网络请求"><a href="#1-全局配置下的网络请求" class="headerlink" title="1.全局配置下的网络请求"></a>1.全局配置下的网络请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过axios的spread方法处理响应数组的结果</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">axios.defaults.baseURL=<span class="string">&#x27;请求公用路径&#x27;</span>;</span><br><span class="line">axios.defaults.timeout=响应超时时间;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据默认请求配置，进行网络请求</span></span><br><span class="line">axios.get(<span class="string">&#x27;请求的详细路径&#x27;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;);</span><br><span class="line">axios.post(<span class="string">&#x27;请求的详细路径&#x27;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-配合实例化配置使用更香哦！！！"><a href="#2-配合实例化配置使用更香哦！！！" class="headerlink" title="2.配合实例化配置使用更香哦！！！"></a>2.配合实例化配置使用更香哦！！！</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过axios的spread方法处理响应数组的结果</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> newVar = axios.create(&#123;</span><br><span class="line">        axios.defaults.baseURL=<span class="string">&#x27;请求公用路径&#x27;</span>,</span><br><span class="line">axios.defaults.timeout=响应超时时间</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newVar1 = axios.create(&#123;</span><br><span class="line">        axios.defaults.baseURL=<span class="string">&#x27;请求公用路径&#x27;</span>,</span><br><span class="line">axios.defaults.timeout=响应超时时间</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据默认请求配置，进行网络请求</span></span><br><span class="line">newVar(&#123;</span><br><span class="line">        url:<span class="string">&#x27;请求的详细路径&#x27;</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">newVar1(&#123;</span><br><span class="line">        url:<span class="string">&#x27;请求的详细路径&#x27;</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="6-拦截器"><a href="#6-拦截器" class="headerlink" title="6. 拦截器"></a>6. 拦截器</h2><p><strong>主要作用于网络请求发起和响应的时候进行操作处理，</strong></p><p><strong>发起请求的时候可以添加网页加载的动画，对用户的登入进行强制。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//request(请求拦截器)response(响应拦截器)</span></span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">axios.interceptors.request 或者 response.use(<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(config);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">&#x27;请求路径&#x27;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React的PubSub机制</title>
      <link href="2021/03/18/React%E7%9A%84PubSub%E6%9C%BA%E5%88%B6/"/>
      <url>2021/03/18/React%E7%9A%84PubSub%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="React使用PubSub事件订阅，组件间通信"><a href="#React使用PubSub事件订阅，组件间通信" class="headerlink" title="React使用PubSub事件订阅，组件间通信"></a>React使用PubSub事件订阅，组件间通信</h1><h2 id="1-官网：https-github-com-mroderick-PubSubJS"><a href="#1-官网：https-github-com-mroderick-PubSubJS" class="headerlink" title="1.官网：https://github.com/mroderick/PubSubJS"></a>1.官网：<a href="https://github.com/mroderick/PubSubJS">https://github.com/mroderick/PubSubJS</a></h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>​    <a href="https://github.com/mroderick/PubSubJS">PubSub</a>，一个利用JavaScript进行发布/订阅的库，</p><p>为了方便在模块化开发当中进行各个模块的数据传递，所以引入了PubSub.js库。</p><h3 id="2-消息订阅与发布机制"><a href="#2-消息订阅与发布机制" class="headerlink" title="2.消息订阅与发布机制"></a>2.消息订阅与发布机制</h3><pre><code>               1.先订阅，再发布（理解：有一种隔空对话的感觉）              2.适用于任意组件间通信                        3.要在组件的componentWillUnmount中取消订阅</code></pre><h2 id="2-PubSub安装"><a href="#2-PubSub安装" class="headerlink" title="2.PubSub安装"></a>2.PubSub安装</h2><h3 id="1-下载依赖包"><a href="#1-下载依赖包" class="headerlink" title="1.下载依赖包"></a>1.下载依赖包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install pubsub-js </span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">yarn add pubsub-js</span><br></pre></td></tr></table></figure><h3 id="2-使用外链引用"><a href="#2-使用外链引用" class="headerlink" title="2.使用外链引用"></a>2.使用外链引用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.jsdelivr.com/#!pubsubjs</span></span><br><span class="line">https:<span class="comment">//cdnjs.com/libraries/pubsub-js</span></span><br><span class="line">https:<span class="comment">//unpkg.com/pubsub-js</span></span><br></pre></td></tr></table></figure><h3 id="3-在组件中导入"><a href="#3-在组件中导入" class="headerlink" title="3.在组件中导入"></a>3.在组件中导入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// or when using CommonJS</span></span><br><span class="line"><span class="keyword">const</span> PubSub = <span class="built_in">require</span>(<span class="string">&#x27;pubsub-js&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="4-使用PubSub"><a href="#4-使用PubSub" class="headerlink" title="4.使用PubSub"></a>4.使用PubSub</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//消息发布：传递两个参数一个是接受函数的名字，一个给接受函数传递的参数</span></span><br><span class="line">  PubSub.publish(<span class="string">&#x27;fnName&#x27;</span>,data)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//消息订阅：函数接受  使用一个变量token去接收,传递两个参数，一个是定义的函数名字，一个是接收的函数（接收函数里面的msg可以忽略，data就是传递过来的值）；</span></span><br><span class="line"><span class="comment">//emmm，感觉和vuex有类似的地方</span></span><br><span class="line">   <span class="built_in">this</span>.token = PubSub.subscribe(<span class="string">&#x27;fnName&#x27;</span>, <span class="function">(<span class="params">msg, data</span>) =&gt;</span> &#123;</span><br><span class="line">             <span class="built_in">console</span>.log(data);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h3 id="5-案例"><a href="#5-案例" class="headerlink" title="5.案例"></a>5.案例</h3><p>​            在要使用的组件引入：**import PubSub from ‘pubsub-js’ ** ，然后在父组件的componentWillMount钩子进行消息的订阅。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Bar <span class="keyword">from</span> <span class="string">&#x27;./components/Bar&#x27;</span></span><br><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      msg:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">componentWillMount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 订阅消息</span></span><br><span class="line">    PubSub.subscribe(<span class="string">&#x27;msg&#x27;</span>,<span class="function">(<span class="params">msg,data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        msg:data</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;msg&#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Bar/&gt;</span><br><span class="line">        &lt;p style=&#123;&#123;<span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>&#125;&#125;&gt;我是订阅的结果：&#123;msg&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​            在子组件/(兄弟组件)中进行发布消息，毕竟有了快递包裹的发件人，( •̀ ω •́ )y一定会有接受包裹的收件人。在这里我就以子组件为例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  sendMsg = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 发布消息</span></span><br><span class="line">    PubSub.publish(<span class="string">&#x27;msg&#x27;</span>,<span class="string">`我是发布的随机数：<span class="subst">$&#123;<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">1000</span>)&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.sendMsg&#125;&gt;发布消息&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PubSub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
